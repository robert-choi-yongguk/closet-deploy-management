name: 통합 배포 PR 수동 생성

on:
  workflow_dispatch:
    inputs:
      release_date:
        description: '릴리즈 날짜 (YYYY-MM-DD 형식)'
        required: true
        type: string

jobs:
  find-repos-with-logs:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.set-matrix.outputs.repos }}

    steps:
      - name: 현재 레포지토리(이력 관리용) 체크아웃
        uses: actions/checkout@v4

      - name: pending 디렉토리에서 로그 파일 스캔 및 매트릭스 생성
        id: set-matrix
        run: |
          if [ ! -d "pending" ]; then
            echo "pending 디렉토리가 없습니다."
            echo "repos=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          REPOS_JSON="["
          FIRST=true
          for dir in $(find pending -mindepth 2 -maxdepth 2 -type d); do
            if [[ -f "$dir/history.log" && -s "$dir/history.log" ]]; then
              if [ "$FIRST" = "false" ]; then
                REPOS_JSON="$REPOS_JSON,"
              fi
              owner=$(echo "$dir" | cut -d'/' -f2)
              repo=$(echo "$dir" | cut -d'/' -f3)
              REPOS_JSON="$REPOS_JSON{\"owner\":\"$owner\",\"repo\":\"$repo\"}"
              FIRST=false
            fi
          done
          REPOS_JSON="$REPOS_JSON]"

          if [ "$REPOS_JSON" == "[]" ]; then
            echo "릴리즈할 내용이 있는 로그 파일이 없습니다."
            echo "repos=[]" >> $GITHUB_OUTPUT
          else
            echo "발견된 레포지토리: $REPOS_JSON"
            echo "repos=$REPOS_JSON" >> $GITHUB_OUTPUT
          fi


  create-release-prs:
    needs: find-repos-with-logs
    if: needs.find-repos-with-logs.outputs.repos != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo_info: ${{ fromJson(needs.find-repos-with-logs.outputs.repos) }}
      fail-fast: false

    steps:
      - name: 현재 레포지토리(이력 관리용) 체크아웃
        uses: actions/checkout@v4

      - name: 릴리즈 노트 생성
        id: generate_release_note
        run: |
          LOG_FILE="pending/${{ matrix.repo_info.owner }}/${{ matrix.repo_info.repo }}/history.log"
          
          RELEASE_NOTE_BODY="### 🚀 릴리즈 노트\n\n"
          while IFS=, read -r pr_number pr_author; do
            RELEASE_NOTE_BODY="${RELEASE_NOTE_BODY}- #${pr_number} by ${pr_author}\n"
          done < "$LOG_FILE"
          
          echo "note<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RELEASE_NOTE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 대상 레포지토리에 배포 PR 생성
        env:
          GH_TOKEN: ${{ secrets.GH_RELEASE_PR_PAT }}
          REPO_FULL_NAME: ${{ matrix.repo_info.owner }}/${{ matrix.repo_info.repo }}
          RELEASE_DATE: ${{ github.event.inputs.release_date }}
        run: |
          if ! [[ "$RELEASE_DATE" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
            echo "::error::날짜 형식이 올바르지 않습니다. YYYY-MM-DD 형식으로 입력해주세요. (입력값: $RELEASE_DATE)"
            exit 1
          fi

          PR_TITLE="$RELEASE_DATE Release"

          echo "'Deployment' 라벨 존재 여부 확인 및 생성..."
          gh label list --repo $REPO_FULL_NAME | grep -q "Deployment" || gh label create "Deployment" --repo $REPO_FULL_NAME --description "Production Deployment" --color "#34d058"

          if ! git ls-remote --exit-code --heads "https://x-access-token:${GH_TOKEN}@github.com/${REPO_FULL_NAME}.git" release >/dev/null; then
            echo "::warning::'release' 브랜치가 '${REPO_FULL_NAME}' 레포지토리에 존재하지 않아 PR 생성을 건너뜁니다."
            exit 0
          fi

          gh pr create \
            --repo $REPO_FULL_NAME \
            --base main \
            --head release \
            --title "$PR_TITLE" \
            --body "${{ steps.generate_release_note.outputs.note }}" \
            --label "Deployment"
